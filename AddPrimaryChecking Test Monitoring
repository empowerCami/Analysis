drop table if exists #PrimaryCheckingAcctDRIVER
SELECT 
distinct b.userId
, b.InstitutionAccountId
, b.name
, c.AccountId 
, c.AccountType
, d.HasOAuth
, b.DateCreated
, z.SubscriptionStatus
, z.StartDate as sub_start_date

into #PrimaryCheckingAcctDRIVER
--from #PrimaryCheckingAcctSUCCEED_ACCT_DRIVER a
from dbo.InstitutionAccount b
--on a.userId = b.userId
left join dbo.Account c 
on b.InstitutionAccountId = c.InstitutionAccountId
left join Institution d
on b.name = d.name 
left join userSubscription z 
on b.UserId = z.UserId 
where c.AccountType = 0 -- 0 = checking account 
and b.DateCreated >= '2022-12-19' -- change went live evening of 12/19
and z.StartDate >= '2022-12-19'
;
--- table 2: add balance info (broken into two tables to manage run time)
drop table if exists #PrimaryCheckingAcctDRIVER_2
select 
a.* 
, b.balance 
, b.DateAdded 
into #PrimaryCheckingAcctDRIVER_2
from #PrimaryCheckingAcctDRIVER a 
left join AccountBalance b 
on a.AccountId = b.AccountId and b.AccountId % 100 = b.AccountMod 
where 1=1
and b.DateAdded >= (a.DateCreated - 30) -- looking at balances from 30 days previous to account creation 
;
drop table if exists #PrimaryCheckingAcctDRIVER_2_5
select 
*
, row_number() over(partition by UserId, AccountId order by balance desc) as bal_amt_num
into #PrimaryCheckingAcctDRIVER_2_5 
from #PrimaryCheckingAcctDRIVER_2 
order by userId
, AccountId
;

--- table 3: add case stmt logic to flag risky institutions and less than -$350 balance 
drop table if exists #PrimaryCheckingAcctDRIVER_3
select 
*
, case when name in ('Chime', 'Simple', 'Varo') then 1 else 0 end as risky_institution 
, case when balance < -350 then 1 else 0 end as sub_neg350_balance
into #PrimaryCheckingAcctDRIVER_3
from #PrimaryCheckingAcctDRIVER_2_5
where bal_amt_num = 1 -- highest balance
; 

--select * from #PrimaryCheckingAcctDRIVER_2 where userId = 5645451 ;

--- table 4: add trxn data (to be cleaned in subsequent tables) -- need to start with a list bc otherwise this takes too long
drop table if exists #trxns_pre
select
a.*
, c.id as trxn_id
, c.amount as trxn_amt
, c.date as trxn_date
--, c.TransactionId
into #trxns_pre
from #PrimaryCheckingAcctDRIVER_3 a
left join Transactions c
on a.AccountId = c.AccountId and c.AccountId % 100 = c.AccountMod 
and c.date >= (a.DateCreated - 30) -- looking at trxns from 30 days previous to account creation 
;
--- table 5: rank trxns so you can count them
drop table if exists #trxns_pre2
SELECT 
*
, row_number() over(partition by UserId, AccountId order by trxn_date desc) as trxn_row_num
into #trxns_pre2
from #trxns_pre 
;
--- table 6: filter for users that have more than 3 trxns (so we can see who has less ultimately)
drop table if exists #trxns_pre3
SELECT 
*
into #trxns_pre3
from #trxns_pre2
where trxn_row_num >= 3
;
-- table 7: create flag
drop table if exists #trxns_flag_pre
select 
distinct userId 
, 1 as three_trxns_flag
into #trxns_flag_pre
from #trxns_pre3
;
-- table 8: add flag to table
drop table if exists #trxns_flag
select
a.* 
, case when b.three_trxns_flag is null then 0 else b.three_trxns_flag end as three_trxns_flag
into #trxns_flag
from #PrimaryCheckingAcctDRIVER_3 a 
left join #trxns_flag_pre b 
on a.UserId = b.UserId 
;
-- select * from #trxns_flag where less_than_three_trxns_flag = 1 ;
-- select three_trxns_flag, count(distinct userId) from #trxns_flag group by three_trxns_flag ;

drop table if exists #trxns_amount_flag_pre
select 
*
, row_number() over(partition by UserId, AccountId order by trxn_amt desc) as trxn_amt_num
into #trxns_amount_flag_pre
from #trxns_pre
;

drop table if exists #trxns_amount_flag_pre1
select
* 
into #trxns_amount_flag_pre1
from #trxns_amount_flag_pre 
where trxn_amt_num = 1 --highest $ trxn
;

drop table if exists #trxns_amount_flag_pre2
select 
distinct userId 
, 1 as trxn_amount_flag
into #trxns_amount_flag_pre2
from #trxns_amount_flag_pre1 
where trxn_amt > 200 -- checking to see if the trxn is greater than 200 to filter to those that aren't
;

drop table if exists #all_flags_added
select 
a.* 
, case when b.trxn_amount_flag is null then 0 else b.trxn_amount_flag end as trxn_amount_flag

into #all_flags_added
from #trxns_flag a
left join #trxns_amount_flag_pre2 b
on a.UserId = b.UserId
;

drop table if exists #swap_ins 
select 
distinct userId 
into #swap_ins 
from #all_flags_added 
where trxn_amount_flag = 0 and three_trxns_flag = 0 and risky_institution= 1
;
select * from #all_flags_added where trxn_amount_flag = 0 and three_trxns_flag = 0 and risky_institution = 1 ;
select * from  Transactions where AccountId = 11410999 order by date;
--- what % add an additional account 
drop table if exists #accountAddCheck 
select 
* 
, row_number() over(partition by UserId order by DateCreated desc) as acct_connection_rank
into #accountAddCheck 
from InstitutionAccount 
where userId in (select distinct userId from #swap_ins) order by userId
;

select 
count(distinct userId) 
from #accountAddCheck 
where acct_connection_rank > 1
; -- 113 / 309= 37%

drop table if exists #CAcheck
select
distinct a.userId
, b.userCashAdvanceSubscriptionId 
, c.userCashAdvanceId
, c.AdvanceDate
into #CAcheck
from #swap_ins a
left join userCashAdvanceSubscription b 
on a.UserId = b.UserId
left join userCashAdvance c 
on b.userCashAdvanceSubscriptionId = c.userCashAdvanceSubscriptionId 
;

select 
count(distinct userCashAdvanceId) 
, count(distinct userId)
from #CAcheck 
--where AdvanceDate >= '2022-12-19'; --7/309 = 2%

drop table if exists #SubCheck
select
distinct a.userId
, b.userSubscriptionId 
, b.SubscriptionStatus
, b.StartDate 
into #SubCheck
from #swap_ins a 
left join userSubscription b 
on a.UserId = b.UserId 
;

select SubscriptionStatus, count(distinct UserId) from #SubCheck  where StartDate >= '2022-12-19' group by SubscriptionStatus;
